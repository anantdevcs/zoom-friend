
from typing import TextIO


tex = '''
So we been spending the last couple weeks working, particularly on JavaScript, working on using JavaScript to be able to write code that runs on the client run inside the web browser allows us to have dynamic web applications that allow for animation, for instance, or for sending messages back and forth in real time without the user needing to reload the web browser, and so were going to do today is transition a little bit back to Python, so in order to build more complicated web applications, we've been using a Python web framework known as flask, which letters using relatively few lines of code. \n Very quickly set up a web application. \n We were able to control routes where users are requesting information at a particular URL and we could direct them one place another to show, one page to another with whatever information we wanted and we were able to book flask up to a backend database using PostgreSQL in order to make sure that our web application could manipulate data in order to add rows to table, remove rows from table, edit them someone so forth. \n But Flask would call a micro framework. \n It's pretty lightweight, framework doesn't have a whole lot to it, just enough to get us. \n Up and running, and so as people begin to work on more complicated web applications, there are lot of things that start to become repetitive that flask will just become start to get frustrating, have to deal with the complexities of trying to build things out for yourself. \n For instance in any web applications you find that you need to add users and have systems for users to login the authenticated in logout or you want a way for users of your website managers of your website to be able to add data to update existing information, add information to. \n Any of various tables or you might have more complicated relationship between your date you want to manage and if you are writing a web application in flask, you would need to build all that out for yourself. \n You would need to design pages that let people add data to database, have separate pages, let people edit them, remove that data and all that would be manual work that you would need to do. \n But because it's so common there other web frameworks out there that give you a little bit more out of the box. \n And so today we are going to be introducing is a new web framework that looks similar to flask in Spirit. \n What is much heavier wet has a lot more features and capabilities that it has built into it, known as Django. \n Going to be exploring Django and some just some of the features that it has to offer when it comes to Earth building. \n More complex web applications and Argos look through all of this. \n It will start by looking at simple web applications where it seems like we are doing the same thing that flashed could do, but it seems like it's just a little more complicated but will soon see how you sing a framework Django. \n We can actually take advantage of. \n Deleveraging gives us in order to allow add a whole lot of additional features and complexities and nuances. \n Store application. \n They will take much more time to build up for yourself by hand. \n You sing something like Flask and Django just makes much simpler for us to build, so let's go ahead and get started by building our first Django application. \n And so once you install Django and in this course we're going to be using the latest version of Django Django to which was released recently, you run a command that looks something like this. \n You get access to a command called Django Admin and Django device. \n All of its web applications into water called project. \n So think of a project just your entire web application. \n They might be composed of different parts which one see, but create a new project. \n You run a command like Django Dash admin which is the name of the Command Start project to create a brand new project followed by the name of the project that you want to create. \n So let's take a look at an example that if I go under the command line and I type Django Admin start project, I will just call it my site for instance, but that's going to do. \n Is it going to create a new directory for me called my site? ICD into it, I see that I have a file called managed Pie and another directory inside of it, also called my site. \n And if I go into that directory I have a whole bunch of other files that have been created for me. \n I didn't get any these files into pie settings URL in wsgi. \n These are just files are created from die by default when Django first creates a project for me. \n So what are these files and what they mean? Well, this minute dot file is tells us that they my site. \n Directory is a Python package in a Python package, is just a collection of a bunch of different Python files. \n Dar group together for some purpose, and Django is really built on the idea of these Python packages were gonna end up with multiple different Python packages, multiple different groups of files, that teacher serving slightly different purpose, and Django is going to allow us to have a web application that uses and integrate with all these managed paisa. \n Particularly important file you won't need to edit Manager Pie but manage the pies going to be a Python script that you can use in order to. \n Perform some very useful operations on your web application as your work

'''
# print(tex)

from TextToSummary import TextToSummary
obj3 = TextToSummary()
summary = obj3.summarize(text=tex)
print(summary)